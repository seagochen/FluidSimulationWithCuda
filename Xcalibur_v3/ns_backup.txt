void NavierStokesSolver::AddSource
	( double *ptrDevDens, double *ptrDevU, double *ptrDevV, double *ptrDevW, double *ptrDevObst,
	int *nInTime, int *nDeTime, cdouble deltatime )
{
	m_scHelper.DeviceParamDim( &gridDim, &blockDim, THREADS_S, TILE_X, TILE_Y, GRIDS_X, GRIDS_Y, GRIDS_Z );
};

void NavierStokesSolver::SolveVelocity
	( double *ptrDevVelU, double *ptrDevVelU0,
	double *ptrDevVelV, double *ptrDevVelV0,
	double *ptrDevVelW, double *ptrDevVelW0,
	double *ptrDevDiv,  double *ptrDevPress, cdouble timestep )
{
	m_scHelper.DeviceParamDim( &gridDim, &blockDim, THREADS_S, TILE_X, TILE_Y, GRIDS_X, GRIDS_Y, GRIDS_Z );
};

void NavierStokesSolver::SolveDensity
	( double *ptrDevDens, double *ptrDevDens0,
	cdouble *ptrDevVelU, cdouble *ptrDevVelV, cdouble *ptrDevVelW, cdouble timestep )
{
	m_scHelper.DeviceParamDim( &gridDim, &blockDim, THREADS_S, TILE_X, TILE_Y, GRIDS_X, GRIDS_Y, GRIDS_Z );

};

void NavierStokesSolver::Jacobi( double *out, cdouble *in, cdouble diff, cdouble divisor )
{
	m_scHelper.DeviceParamDim( &gridDim, &blockDim, THREADS_S, TILE_X, TILE_Y, GRIDS_X, GRIDS_Y, GRIDS_Z );

};

void NavierStokesSolver::Advection
	( double *out, cdouble *in, cdouble timestep, cdouble *u, cdouble *v, cdouble *w )
{
	m_scHelper.DeviceParamDim( &gridDim, &blockDim, THREADS_S, TILE_X, TILE_Y, GRIDS_X, GRIDS_Y, GRIDS_Z );

};

void NavierStokesSolver::Diffusion( double *out, cdouble *in, cdouble diff )
{
	m_scHelper.DeviceParamDim( &gridDim, &blockDim, THREADS_S, TILE_X, TILE_Y, GRIDS_X, GRIDS_Y, GRIDS_Z );

};

void NavierStokesSolver::Projection( double *u, double *v, double *w, double *div, double *p )
{
	m_scHelper.DeviceParamDim( &gridDim, &blockDim, THREADS_S, TILE_X, TILE_Y, GRIDS_X, GRIDS_Y, GRIDS_Z );

};


__global__ void kernelAddSource
	( double *den, double *u, double *v, double *w, 
	cdouble *obst, cdouble rho, cdouble vel, cdouble delta, cint time,
	cint tx, cint ty, cint tz )
{
	int i, j, k;
	thread();

	if ( atomicIXNotHalo( i, j, k, tx, ty, tz ) )
	{
		if ( obst[ IX(i,j,k) ] < 0 )
		{
			double rate = -obst[ IX(i,j,k) ];

			/* add rho to density field */
			den[ IX(i,j,k) ] = rate * rho * delta;

			/* add velocity to velocity field */
			v[ IX(i,j,k) ] = rate * vel * delta;

			double randno = _random( _rand(time) );
			if ( randno < 0.25f and randno >= 0.f )
			{
				u[ IX(i,j,k) ] = -rate * vel * delta * delta;
				w[ IX(i,j,k) ] = -rate * vel * delta * delta;
			}
			elif ( randno >= 0.25f and randno < 0.5f )
			{
				u[ IX(i,j,k) ] = -rate * vel * delta * delta;
				w[ IX(i,j,k) ] =  rate * vel * delta * delta;				
			}
			elif ( randno >= 0.5f and randno < 0.75f )
			{
				u[ IX(i,j,k) ] =  rate * vel * delta * delta;
				w[ IX(i,j,k) ] = -rate * vel * delta * delta;
			}
			else
			{
				u[ IX(i,j,k) ] = rate * vel * delta * delta;
				w[ IX(i,j,k) ] = rate * vel * delta * delta;
			}
		}
	}
};